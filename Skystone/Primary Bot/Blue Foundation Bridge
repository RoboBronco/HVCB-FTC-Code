package FTC_2019_2020_Season;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.util.ElapsedTime;
import java.util.List;

import android.app.Activity;
import android.graphics.Color;
import android.view.View;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
import java.util.Locale;

@Autonomous(name="Blue Foundation Wall Cedar", group="Auto")
public class Blue_Foundation_Wall_Cedar extends LinearOpMode {
 
 

 
     /* Declare OpMode members. */
     RobotHardware robot = new RobotHardware();
     private ElapsedTime runtime = new ElapsedTime();
     

     @Override
     public void runOpMode() throws InterruptedException{
      
      try  {
      
      
     /*
     * Initialize the drive system variables.
     * The init() method of the hardware class does all the work here
     */
     robot.init(hardwareMap);
     
       // get a reference to the color sensor.
        // sensorColor0 = hardwareMap.get(ColorSensor.class, "sensorColor0");
        // sensorColor1 = hardwareMap.get(ColorSensor.class, "sensorColor1");
        // get a reference to the distance sensor that shares the same name.
       // sensorDistance = hardwareMap.get(DistanceSensor.class, "sensor_color_distance");

        // hsvValues is an array that will hold the hue, saturation, and value information.
        float hsvValues0[] = {0F, 0F, 0F};
        float hsvValues1[] = {0F, 0F, 0F};
        // values is a reference to the hsvValues array.
       

        // sometimes it helps to multiply the raw RGB values with a scale factor
        // to amplify/attentuate the measured values.
        final double SCALE_FACTOR = 255;

        // get a reference to the RelativeLayout so we can change the background
        // color of the Robot Controller app to match the hue detected by the RGB sensor.
        int relativeLayoutId = hardwareMap.appContext.getResources().getIdentifier("RelativeLayout", "id", hardwareMap.appContext.getPackageName());
        final View relativeLayout = ((Activity) hardwareMap.appContext).findViewById(relativeLayoutId);


        char skystoneLocation = 'r';
        boolean position = false;


        telemetry.addData("Mode", "calibrating...");
        telemetry.update();

        telemetry.addData("Mode", "calibrating2...");
        telemetry.update();

        while (!isStopRequested() && !robot.imu.isGyroCalibrated())
        {
            Thread.sleep(50);
            idle();
        }


     
     // Wait for the game to start (driver presses PLAY)
        /** Wait for the game to begin */
        telemetry.addData(">", "Press Play to start tracking");
        telemetry.addData("imu calib status", robot.imu.getCalibrationStatus().toString());
        telemetry.update();
        waitForStart();
        
 
            if (opModeIsActive()) {
             
            // Backward
            robot.rightByEncoder(0.25, 4000);
            Thread.sleep(100);
        
          // Move to Foundation
            robot.backwardByEncoder(0.5, -8000);
            Thread.sleep(100);
        
            robot.backwardByEncoder(0.2, -900);
            Thread.sleep(100);
        
          // Grab Foundation
            robot.hook0.setPosition(0.3);// was -0.4 //was -0.3   ////////////////////left
            robot.hook1.setPosition(0.9);//was 0.8 //was 0.45   ///////////////////right
            Thread.sleep(1000);
        
          // Pull Foundation Away Approx. 18in
            robot.forwardByEncoder(0.5, 5800);
          
          // Turn Foundation
            robot.resetAngle();
            robot.rotate(82, 0.5); // was -
            Thread.sleep(100);
                        
           //Release Foundation
            robot.hook0.setPosition(0.95);//was -0.6
            robot.hook1.setPosition(0.25);//was 0.6
            Thread.sleep(1000);  
            
          // Move to Wall
            robot.right();
            Thread.sleep(1000);
            robot.stop();
        
          
           
            // // Get away from foundation
            // robot.backwardByEncoder(0.2 , -1700);
            // Thread.sleep(100);
           
            // // spin 
            // robot.resetAngle();
            // robot.rotate(-70 , 0.5);
            // Thread.sleep(100);
           
            // // right up to wall
            // robot.right();
            // Thread.sleep(1100);
           
            // move  to beneath skybridge
            robot.forwardByEncoder(0.5 , 13000);
            Thread.sleep(100); 
             
             
            robot.hook0.setPosition(0.95);//was -0.6
            robot.hook1.setPosition(0.25);//was 0.6
            Thread.sleep(1000);

         }
         
       
      } catch(InterruptedException e){
 telemetry.addLine("Hey Caught Interruption");
 telemetry.update();
 robot.stop();
//  robot.ssExtend.setPower(0);
//  robot.ssScrew.setPower(0);
 Thread.sleep(500);

}
       
     }
  }
